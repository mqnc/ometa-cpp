
#include <iostream>
#include "ometa.h"

#define EXPECT(condition) \
	if(!(condition)) { \
		std::cerr << "line " << __LINE__ << " failed: " #condition << "\n"; \
	}

int main() {

	any := .;
	EXPECT(any.parse("A"));
	EXPECT(any.parse("A") == "A");
	EXPECT(not any.parse(""));

	abc := "abc";
	def := "def";
	ghi := "ghi";

	literal := abc;
	EXPECT(literal.parse("abcd") == "abc");
	EXPECT(not literal.parse("abX"));
	EXPECT(not literal.parse(""));

	range := {'a'}..{'m'};
	EXPECT(range.parse("m") == "m");
	EXPECT(not range.parse("n"));

	sequence := abc def ghi;
	sequence_0 := sequence -> {$0};
	sequence_1 := sequence -> {$1};
	sequence_2 := sequence -> {$2};
	EXPECT(sequence_0.parse("abcdefghi") == "abc");
	EXPECT(sequence_1.parse("abcdefghi") == "def");
	EXPECT(sequence_2.parse("abcdefghi") == "ghi");
	EXPECT(not sequence.parse("abcdefghX"));

	choice := abc | def | ghi;
	EXPECT(choice.parse("abc") == "abc");
	EXPECT(choice.parse("def") == "def");
	EXPECT(choice.parse("ghi") == "ghi");
	EXPECT(not choice.parse("XXX"));

	lookAhead := &abc;
	EXPECT(lookAhead.parse("abc"));
	EXPECT(not lookAhead.parse("XXX"));

	negativeLookAhead := !abc;
	EXPECT(not negativeLookAhead.parse("abc"));
	EXPECT(negativeLookAhead.parse("XXX"));

	optional := abc? def;
	optional_0 := optional -> {$0};
	optional_1 := optional -> {$1};
	EXPECT(optional.parse("abcdef"));
	EXPECT(optional_0.parse("abcdef").value().size() == 1);
	EXPECT(optional_0.parse("abcdef").value()[0] == "abc");
	EXPECT(optional_1.parse("abcdef") == "def");
	EXPECT(optional.parse("def"));
	EXPECT(optional_0.parse("def").value().size() == 0);
	EXPECT(optional_1.parse("def") == "def");
	EXPECT(not optional.parse("XXX"));

	zeroOrMore := abc* def;
	zeroOrMore_0 := zeroOrMore -> {$0};
	zeroOrMore_1 := zeroOrMore -> {$1};
	EXPECT(zeroOrMore.parse("abcabcdef"));
	EXPECT(zeroOrMore_0.parse("abcabcdef").value().size() == 2);
	EXPECT(zeroOrMore_0.parse("abcabcdef").value()[1] == "abc");
	EXPECT(zeroOrMore_0.parse("abcdef"));
	EXPECT(zeroOrMore_0.parse("def"));
	EXPECT(not zeroOrMore.parse("XXX"));

	oneOrMore := abc+ def;
	EXPECT(oneOrMore.parse("abcabcdef"));
	EXPECT(oneOrMore.parse("abcdef"));
	EXPECT(not oneOrMore.parse("def"));
	EXPECT(not oneOrMore.parse("XXX"));

	capture := <abc+ def>;
	EXPECT(capture.parse("abcabcdef---") == "abcabcdef");

	actionWithoutInput := {
		EXPECT($ == ometa::ignore);
		return 123;
	};
	EXPECT(actionWithoutInput.parse("abc") == 123);

	actionWithInput := abc -> {
		EXPECT($ == "abc");
		return 456;
	};
	EXPECT(actionWithInput.parse("abc") == 456);

	predicateWithoutInput := {?
		EXPECT($ == ometa::ignore);
		return true;
	};
	EXPECT(predicateWithoutInput.parse("abc"));

	predicateWithInput := abc {?
		EXPECT($ == "abc");
		return true;
	};
	EXPECT(predicateWithInput.parse("abc"));
	EXPECT(predicateWithInput.parse("abc") == "abc");

	rejectingPredicate := abc {?
		EXPECT(not $);
		return false;
	};
	EXPECT(not rejectingPredicate.parse("XXX"));

	binding := abc:t0 ("+" abc)*:ts;
	binding_t0 := binding -> {$t0};
	EXPECT(binding_t0.parse("abc+abc+abc") == "abc");
	binding_ts_0_0 := binding -> {$ts[0]} -> {$0};
	EXPECT(binding_ts_0_0.parse("abc+abc+abc") == "+");

	recursion^ : {std::string_view} -> {ometa::ViewTree<std::string_view>};
	recursion^ => abc | <"(" recursion^ ")">;
	EXPECT(recursion->parse("abc") == "abc");
	EXPECT(recursion->parse("(abc)") == "(abc)");
	EXPECT(recursion->parse("((abc))") == "((abc))");

	macro[x, y, z] := z y x -> ometa::concat;
	parametrizedMacro := macro[abc, def, ghi];
	EXPECT(parametrizedMacro.parse("ghidefabc") == "ghidefabc");

	std::string src = "0123456789abcdefghijklmnopqrstuvwxyz";
	auto tree1 = ometa::ViewTree(ometa::View(std::string_view(src).substr(5, 5)));
	auto tree2 = ometa::ViewTree(ometa::View(std::string_view(src).substr(20, 3)));
	auto tree3 = ometa::ViewTree(ometa::View(std::string_view(src).substr(30, 1)));
	auto tree4 = ometa::ViewTree(ometa::View(std::string_view(src).substr(0, 0)));
	auto tree1234 = tree1 + tree2 + tree3 + tree4;
	EXPECT(tree1234 == "56789klmu");

	std::vector<int> intSrc = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	auto lit123 = ometa::literal(std::vector<int>{1, 2, 3});
	auto lit567 = ometa::literal(std::vector<int>{5, 6, 7});
	lit_123_567 := . lit123* . lit567+ -> ometa::concat;
	auto expected_result = std::vector<int>{0, 1, 2, 3, 4, 5, 6, 7};
	EXPECT(lit_123_567.parse(intSrc) == expected_result);

	using ViewTree = ometa::ViewTree<std::string_view>;
	@variables: ViewTree -> ViewTree;
	auto context = ometa::Context(variables);
	identifier := {'a'}..{'z'};
	number := {'0'}..{'9'};
	assignment := identifier:i "=" number:n -> {@variables.insert({$i, $n});} ~";";
	commentMarker := "X;";
	comment := (!commentMarker .)* commentMarker -> {ometa::ignore};
	statement := assignment | comment;
	code := statement*;
	auto result = code.parse("a=1;b=2X;c=3;", context);
	EXPECT(@variables.at('"a"') == "1");
	EXPECT(@variables.at('"c"') == "3");
	EXPECT(@variables.size() == 2);
	for(const auto& [key, value]: @variables) {
		EXPECT(key == "a" && value == "1" || key == "c" && value == "3");
	}


	std::cout << "done!\n";

	return 0;
}
