

#include "src/ometa.h"

#include <cassert>
#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
#include <ctime>

#undef OMETA_LOG
#define OMETA_LOG(p)

using ViewTree = ometa::ViewTree<std::string_view>;

int main(int argc, char* argv[]) {

	if(argc != 3){
		std::cout << "usage: " << argv[0] << " INPUT_FILE OUTPUT_FILE\n";
		return EXIT_FAILURE;
	}

	_ := <(" " | "\t" | "\n")*>;

	identStart := {'A'}..{'Z'} | {'a'}..{'z'} | "_" | "::";
	identContinue := identStart | {'0'}..{'9'};
	identifier := <identStart identContinue*>;
	reference := identifier ~"^" -> {'"ometa::ptr("' + $ + '")"'};

	cppChar := ~"\\" ~. | ~.;
	cppLiteral := <
		~"'" ~(!"'" ~cppChar)* ~"'"
		| ~"\"" ~(!"\"" ~cppChar)* ~"\""
	>;
	
	viewTreeLiteral :=
		~"'" <"\"" ~(!"'" !"\"" ~cppChar)* ~"\""> ~"'"
	{'"_tree_"'} -> ometa::concat;

	valueRef := ~"$" -> {'"value"'};
	indexedValueRef := ~"$" <{'0'}..{'9'}+> -> {'"ometa::pick<"' + $ + '"-1>(value)"'};

	cppExpression^ : {std::string_view} -> {ViewTree};
	parenthesizedCppExpression := ~"(" cppExpression^ ~")";
	bracketedCppExpression := ~"[" cppExpression^ ~"]";
	bracedCppExpression := ~"{" cppExpression^ ~"}";
	predicateCppExpression := ~"{" ~_ ~ "?" cppExpression^ ~"}";

	cppExpression^ => (
		identifier {? $ && *$ != "return"}
		| viewTreeLiteral
		| cppLiteral
		| parenthesizedCppExpression -> {'"("' + $ + '")"'}
		| bracketedCppExpression -> {'"["' + $ + '"]"'}
		| indexedValueRef
		| valueRef
		| !")" !"]" !"}" !";" .
	)* -> ometa::concat;

	cppCode^ : {std::string_view} -> {ViewTree};
	parenthesizedCppCode := ~"(" cppCode^ ~")";
	bracketedCppCode := ~"[" cppCode^ ~"]";
	bracedCppCode := ~"{" cppCode^ ~"}";
	predicateCppCode := ~"{" ~_ ~ "?" cppCode^ ~"}";

	ruleForwardDecl^ : {std::string_view} -> {ViewTree};
	ruleDefinition^ : {std::string_view} -> {ViewTree};
	ruleRedefinition^ : {std::string_view} -> {ViewTree};

	cppCode^ => (
		ruleForwardDecl^
		| ruleDefinition^
		| ruleRedefinition^
		| identifier
		| cppLiteral
		| parenthesizedCppCode -> {'"("' + $ + '")"'}
		| bracketedCppCode -> {'"["' + $ + '"]"'}
		| bracedCppCode -> {'"{"' + $ + '"}"'}
		| indexedValueRef
		| valueRef
		| !")" !"]" !"}" .
	)* -> ometa::concat;

	any := "." -> {'"ometa::any()"'};
	epsilon := "()" -> {'"ometa::epsilon()"'};

	character :=
		~"\\" ~("n" | "r" | "t" | "\"" | "\\")
		| !"\\" ~.;
	literal := <"\"" (!"\"" character)* "\"">
		{'"_lit_"'} -> ometa::concat;

	range := bracedCppCode ~_ ~".." ~_ bracedCppCode -> {
		'"ometa::range(("' + $1 + '"), ("' + $2 + '"))"'
	};

	choice^ : {std::string_view} -> {ViewTree};
	parenthesized := ~"(" ~_ choice^ ~_ ~")" ->
		{'"("' + $ + '")"'};
	capture := ~"<" ~_ choice^ ~_ ~">" ->
		{'"ometa::capture("' + $ + '")"'};

	action :=
		identifier
		| bracedCppExpression -> {'"ometa::action([](auto value){return "' + $ + '";})"'}
		| bracedCppCode -> {'"ometa::action([](auto value){"' + $ + '"})"'};
	predicate :=
		identifier
		| predicateCppExpression -> {'"ometa::predicate([](auto value){return "' + $ + '";})"'}
		| predicateCppCode -> {'"ometa::predicate([](auto value){"' + $ + '"})"'};

	parameterizedAction := ~"->" {'" >= "'} ~_ action -> ometa::concat;

	primary :=
		reference
		| identifier
		| any
		| epsilon
		| literal
		| range
		| capture
		| predicate
		| action
		| parenthesized;

	postfix := primary (
		"?" -> {'"-"'}
		| "*" -> {'"*"'}
		| "+" -> {'"+"'}
	)? -> { $2.size() == 0 ? $1 : $2[0] + $1 };

	prefix := <("&" | "!" | "~")?>
		~_ postfix -> ometa::concat;

	sequence := prefix (
		(~_ (
			{'" > "'} prefix -> ometa::concat
			| parameterizedAction
		)) -> ometa::concat
	)* -> ometa::concat;

	choice^ => sequence (
		<_ "|" _> sequence -> ometa::concat
	)* -> ometa::concat;

	ruleForwardDecl^ => identifier ~"^" ~_ ~":" ~_
		bracedCppExpression ~_ ~"->" ~_ bracedCppExpression ~_ ~";"
		-> {
			'"auto "' + $1 + '" = ometa::declare<"'
				+ $2 + '", "' + $3 + '">();"'
		};

	ruleDefinition^ => identifier ~_ ~":=" ~_ choice^ ~_ ~";"
		-> {'"const auto "' + $1 + '" = "' + $2 + '"; OMETA_LOG("' + $1 + '");"'};

	ruleRedefinition^ => identifier ~"^" ~_ ~"=>" ~_ choice^ ~_ ~";"
		-> {'"*"' + $1 + '" = "' + $2 + '"; OMETA_LOG(*"' + $1 + '");"'};

	auto code = ometa::readFile(argv[1]);

	auto result = cppCode->parse(code);
	if (result) {
		try {
			auto backup = ometa::readFile(argv[2]);
			std::time_t time = std::time({});
			char timeString[std::size("yyyy_mm_dd__hh_mm_ssZ")];
			std::strftime(std::data(timeString), std::size(timeString),
				"%Y_%m_%d__%H_%M_%S", std::gmtime(&time));
			ometa::writeFile(std::string(argv[2]) + "." + timeString + ".backup", backup);
		}
		catch (...) {}

		ometa::writeFile(argv[2], *result);
	}
	else {
		std::cout << "fail\n";
		return EXIT_FAILURE;
	}

	return EXIT_SUCCESS;
}
