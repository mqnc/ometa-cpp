

#include "src/ometa.h"

#include <cassert>
#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
#include <ctime>

#undef OMETA_LOG
#define OMETA_LOG(p)

using ometa::operator""_L;

//using Snippet = std::string;
using Snippet = ometa::Snippet<std::string_view>;
auto toSnippet = ometa::action([](auto src) {
	return Snippet{ometa::View<std::string_view>(src)};
});
auto operator""_S(const char* str, size_t len) {
	return Snippet(std::string_view(str, len));
}

int main(int argc, char* argv[]) {

	if(argc != 3){
		std::cout << "usage: " << argv[0] << " INPUT_FILE OUTPUT_FILE\n";
		return EXIT_FAILURE;
	}

	_ := <(" " | "\t" | "\n")*> -> toSnippet;

	identStart := {'A'}..{'Z'} | {'a'}..{'z'} | "_" | "::";
	identContinue := identStart | {'0'}..{'9'};
	identifier := <identStart identContinue*> -> toSnippet;
	reference := identifier ~"^" -> {"ometa::ptr("_S + $ + ")"_S};

	cppChar := ~"\\" ~. | ~.;
	cppLiteral := <
		~"'" !"'" ~cppChar ~"'"
		| ~"\"" ~(!"\"" ~cppChar)* ~"\""
	> -> toSnippet;

	valueRef := ~"$" -> {"value"_S};
	indexedValueRef := ~"$" <{'0'}..{'9'}+> -> toSnippet -> {"ometa::pick<"_S + $ + "-1>(value)"_S};

	cppExpression^ : {std::string_view} -> {Snippet};
	parenthesizedCppExpression := ~"(" cppExpression^ ~")";
	bracketedCppExpression := ~"[" cppExpression^ ~"]";
	bracedCppExpression := ~"{" cppExpression^ ~"}";
	predicateCppExpression := ~"{" ~_ ~ "?" cppExpression^ ~"}";

	cppExpression^ => (
		identifier {? value && value->template collect<std::string>() != "return"}
		| cppLiteral
		| parenthesizedCppExpression -> {"("_S + $ + ")"_S}
		| bracketedCppExpression -> {"["_S + $ + "]"_S}
		| indexedValueRef
		| valueRef
		| !")" !"]" !"}" !";" . -> toSnippet
	)* -> ometa::concat;

	cppCode^ : {std::string_view} -> {Snippet};
	parenthesizedCppCode := ~"(" cppCode^ ~")";
	bracketedCppCode := ~"[" cppCode^ ~"]";
	bracedCppCode := ~"{" cppCode^ ~"}";
	predicateCppCode := ~"{" ~_ ~ "?" cppCode^ ~"}";

	ruleForwardDecl^ : {std::string_view} -> {Snippet};
	ruleDefinition^ : {std::string_view} -> {Snippet};
	ruleRedefinition^ : {std::string_view} -> {Snippet};

	cppCode^ => (
		ruleForwardDecl^
		| ruleDefinition^
		| ruleRedefinition^
		| identifier
		| cppLiteral
		| parenthesizedCppCode -> {"("_S + $ + ")"_S}
		| bracketedCppCode -> {"["_S + $ + "]"_S}
		| bracedCppCode -> {"{"_S + $ + "}"_S}
		| indexedValueRef
		| valueRef
		| !")" !"]" !"}" . -> toSnippet
	)* -> ometa::concat;

	any := "." -> {"ometa::any()"_S};
	epsilon := "()" -> {"ometa::epsilon()"_S};

	character :=
		~"\\" ~("n" | "r" | "t" | "\"" | "\\")
		| !"\\" ~.;
	literal := <"\"" (!"\"" character)* "\""> -> toSnippet
		{"_L"_S} -> ometa::concat;

	range := bracedCppCode ~_ ~".." ~_ bracedCppCode -> {
		"ometa::range(("_S + $1 + "), ("_S + $2 + "))"_S
	};

	choice^ : {std::string_view} -> {Snippet};
	parenthesized := ~"(" ~_ choice^ ~_ ~")" ->
		{"("_S + $ + ")"_S};
	capture := ~"<" ~_ choice^ ~_ ~">" ->
		{"ometa::capture("_S + $ + ")"_S};

	action :=
		identifier
		| bracedCppExpression -> {"ometa::action([](auto value){return "_S + $ + ";})"_S}
		| bracedCppCode -> {"ometa::action([](auto value){"_S + $ + "})"_S};
	predicate :=
		identifier
		| predicateCppExpression -> {"ometa::predicate([](auto value){return "_S + $ + ";})"_S}
		| predicateCppCode -> {"ometa::predicate([](auto value){"_S + $ + "})"_S};

	parameterizedAction := ~"->" {" >= "_S} ~_ action -> ometa::concat;

	primary :=
		reference
		| identifier
		| any
		| epsilon
		| literal
		| range
		| capture
		| predicate
		| action
		| parenthesized;

	postfix := primary (
		"?" -> {"-"_S}
		| "*" -> {"*"_S}
		| "+" -> {"+"_S}
	)? -> { $2.size() == 0 ? $1 : $2[0] + $1 };

	prefix := <("&" | "!" | "~")?> -> toSnippet
		~_ postfix -> ometa::concat;

	sequence := prefix (
		(~_ (
			{" > "_S} prefix -> ometa::concat
			| parameterizedAction
		)) -> ometa::concat
	)* -> ometa::concat;

	choice^ => sequence (
		<_ "|" _> -> toSnippet sequence -> ometa::concat
	)* -> ometa::concat;

	ruleForwardDecl^ => identifier ~"^" ~_ ~":" ~_
		bracedCppExpression ~_ ~"->" ~_ bracedCppExpression ~_ ~";"
		-> {
			"auto "_S + $1 + " = ometa::declare<"_S
				+ $2 + ", "_S + $3 + ">();"_S
		};

	ruleDefinition^ => identifier ~_ ~":=" ~_ choice^ ~_ ~";"
		-> {"const auto "_S + $1 + " = "_S + $2 + "; OMETA_LOG("_S + $1 + ");"_S};

	ruleRedefinition^ => identifier ~"^" ~_ ~"=>" ~_ choice^ ~_ ~";"
		-> {"*"_S + $1 + " = "_S + $2 + "; OMETA_LOG(*"_S + $1 + ");"_S};

	auto code = ometa::readFile(argv[1]);

	auto result = cppCode->parse(code);
	if (result) {
		try {
			auto backup = ometa::readFile(argv[2]);
			std::time_t time = std::time({});
			char timeString[std::size("yyyy_mm_dd__hh_mm_ssZ")];
			std::strftime(std::data(timeString), std::size(timeString),
				"%Y_%m_%d__%H_%M_%S", std::gmtime(&time));
			ometa::writeFile(std::string(argv[2]) + "." + timeString + ".backup", backup);
		}
		catch (...) {}

		std::string resultBuffer;
		result->collect(resultBuffer);
		ometa::writeFile(argv[2], resultBuffer);
	}
	else {
		std::cout << "fail\n";
		return EXIT_FAILURE;
	}

	return EXIT_SUCCESS;
}
