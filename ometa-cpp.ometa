

#include "src/ometa.h"

#include <cassert>
#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
#include <ctime>

using ometa::operator""_L;

using Snippet = std::string;
auto toSnippet = ometa::action([](auto src) {
	if constexpr(std::is_same_v<decltype(src), Snippet>){
		return src;
	}
	else{
		return src.template copyAs<Snippet>();
	}
});
auto operator""_S(const char* compare, size_t size) {
	return Snippet(compare, size);
}

int main(int argc, char* argv[]) {

	if(argc != 3){
		std::cout << "usage: " << argv[0] << " INPUT_FILE OUTPUT_FILE\n";
		return EXIT_FAILURE;
	}

	auto tStart = tic();

	_ := <(" " | "\t" | "\n")*> -> toSnippet;

	identStart := {'A'}..{'Z'} | {'a'}..{'z'} | "_" | "::";
	identContinue := identStart | {'0'}..{'9'};
	identifier := <identStart identContinue*> -> toSnippet;
	reference := identifier ~"^" -> {return "ometa::ptr("_S + $ + ")"_S;};

	cppChar := ~"\\" ~. | ~.;
	cppLiteral := <
		~"'" !"'" ~cppChar ~"'"
		| ~"\"" ~(!"\"" ~cppChar)* ~"\""
	> -> toSnippet;

	valueRef := ~"$" -> {return "value"_S;};
	indexedValueRef := ~"$" <{'0'}..{'9'}+> -> toSnippet -> {return "ometa::pick<"_S + $ + "-1>(value)"_S;};

	cpp^ : {std::string} -> {Snippet};

	ruleForwardDecl^ : {std::string} -> {Snippet};
	ruleDefinition^ : {std::string} -> {Snippet};
	ruleRedefinition^ : {std::string} -> {Snippet};

	bracedCpp := ~"{" cpp^ ~"}";
	
	cpp^ => (
		ruleForwardDecl^
		| ruleDefinition^
		| ruleRedefinition^
		| identifier
		| cppLiteral
		| bracedCpp -> { return "{"_S + $ + "}"_S; }
		| indexedValueRef
		| valueRef
		| !"}" . -> toSnippet
	)* -> ometa::concat;

	any := "." -> {return "ometa::any()"_S;};
	epsilon := "()" -> {return "ometa::epsilon()"_S;};

	character :=
		~"\\" ~("n" | "r" | "t" | "\"" | "\\")
		| !"\\" ~.;
	literal := <"\"" (!"\"" character)* "\""> -> toSnippet
		{return "_L"_S;} -> ometa::concat;

	range := bracedCpp ~_ ~".." ~_ bracedCpp -> {
		return "ometa::range(("_S + $1 + "), ("_S + $2 + "))"_S;
	};

	choice^ : {std::string} -> {Snippet};
	parenthesized := ~"(" ~_ choice^ ~_ ~")" ->
		{ return "("_S + $ + ")"_S; };
	capture := ~"<" ~_ choice^ ~_ ~">" ->
		{ return "ometa::capture("_S + $ + ")"_S; };

	action :=
		identifier -> toSnippet
		| bracedCpp -> { return "ometa::action([](auto value){"_S + $ + "})"_S; };
	predicate := ~"?" ~_ (
		identifier -> toSnippet
		| bracedCpp -> { return "[](auto value){"_S + $ + "}"_S; }
	);

	freeActionOrPredicate := { return "(ometa::epsilon()"_S; }(
		{return " >= "_S;} action
		| {return " <= "_S;} predicate
	) {return ")"_S;} -> ometa::concat;

	boundActionOrPredicate := ~"->" ~_ (
		{return " >= "_S;} action
		| {return " <= "_S;} predicate
	) -> ometa::concat;

	primary :=
		reference
		| identifier
		| any
		| epsilon
		| literal
		| range
		| capture
		| freeActionOrPredicate
		| parenthesized;

	postfix := primary (
		"?" -> {return "-"_S;}
		| "*" -> {return "*"_S;}
		| "+" -> {return "+"_S;}
	)? -> {
		if ($2.size() == 0) {
			return $1;
		}
		else {
			return $2[0] + $1;
		}
	};

	prefix := <("&" | "!" | "~")?> -> toSnippet
		~_ postfix -> ometa::concat;

	sequence := prefix (
		(~_ (
			{return " > "_S;} prefix -> ometa::concat
			| boundActionOrPredicate
		)) -> ometa::concat
	)* -> ometa::concat;

	choice^ => sequence (
		<_ "|" _> -> toSnippet sequence -> ometa::concat
	)* -> ometa::concat;

	ruleForwardDecl^ => identifier ~"^" ~_ ~":" ~_
		bracedCpp ~_ ~"->" ~_ bracedCpp ~_ ~";"
		-> {
			return "auto "_S + $1 + " = ometa::declare<"
				+ $2 + ", " + $3 + ">();";
		};

	ruleDefinition^ => identifier ~_ ~":=" ~_ choice^ ~_ ~";"
		-> { return "const auto "_S + $1 + " = "_S + $2 + ";"; };

	ruleRedefinition^ => identifier ~"^" ~_ ~"=>" ~_ choice^ ~_ ~";"
		-> { return "*"_S + $1 + " = "_S + $2 + ";"; };

	std::cout << "setup: ";
	toc(tStart);


	auto code = ometa::readFile(argv[1]);

	auto result = cpp->parse(code);
	if (result) {
		try {
			auto backup = ometa::readFile(argv[2]);
			std::time_t time = std::time({});
			char timeString[std::size("yyyy_mm_dd__hh_mm_ssZ")];
			std::strftime(std::data(timeString), std::size(timeString),
				"%Y_%m_%d__%H_%M_%S", std::gmtime(&time));
			ometa::writeFile(std::string(argv[2]) + "." + timeString + ".backup", backup);
		}
		catch (...) {}

		ometa::writeFile(argv[2], *result);
	}
	else {
		std::cout << "fail\n";
		return EXIT_FAILURE;
	}

	return EXIT_SUCCESS;
}
